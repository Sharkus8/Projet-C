#include <stdio.h>
#include <string.h>
#include <time.h>
#include <locale.h>

#define MAX_PERSONNES 100
#define MAX_CONGES 25
#define MAX_UTILISATEURS 10
#define TAILLE_NOM 50 //j'add ça pour les char
#define TAILLE_MOT 20
#define TAILLE_POSTE 100

// Structure pour représenter une personne
struct Personne {
    int numeroIdentification;
    char nom[TAILLE_NOM];
    char prenom[TAILLE_NOM];
    struct datest date_naissance;
        //char adresse[100];
        // char email[50];
        //char telephone[15];
    struct coordonnees contact;
    char etatCivil[20];
    struct datestruct date_embauche
    char poste[TAILLE_POSTE];
    char grade[TAILLE_MOT];
    float salaire;
    int age;
    struct id_login login_emp;
    char emailpro[TAILLE_NOM];
    struct tm *tempscréa; //AJOUTER DANS LA PROC2DURE DE CREA ET DE MODIFICATION UN PRINTF DU TEMPS 
    struct tm *tempsmodif;
};

// Structure pour représenter une demande de congé
struct Conge {
    int numeroIdentification;
    struct datest dateDebut;
    struct datest dateFin;
    char statut[20];
};

// Structure pour représenter un utilisateur avec ses droits
// est-ce que cette structure est remplaçable par celle de log-in ou s'agit-il de quelque chose de différent ?
struct Utilisateur {
    char nomUtilisateur[TAILLE_MOT];
    char role[20];
};

//structure des coordonnées
struct coordonnees
	{
		char numero[TAILLE_NOM]; //numéro est de type char pour permettre l'écriture d'un "bis" et autres particularités de ce type
		char rue[TAILLE_NOM];
		char complement1[TAILLE_NOM];
		char complement2[TAILLE_NOM];
		int code_postal;
		char ville[TAILLE_NOM];
		char pays[TAILLE_NOM];
		char adresse_mail[TAILLE_NOM];
		int telephone;
	};
	
//structure d'une date
struct datest
	{
		int jour;
		int mois;
		int annee;
	};
	
// structure de id_login qui permet d'unifier la structure de login 
struct id_login
	{
		char username[TAILLE_MOT];
		char motdepasse[TAILLE_MOT];
		int valdroits;
	};

//strcuture de fiche de poste pour avoir des fiches de postes unifiées
struct ficheposte
	{
		char nomposte[TAILLE_MOT];
		char salairedebutposte[TAILLE_MOT];
		char diplome[TAILLE_MOT];
		char gradeposte[TAILLE_MOT];
	}



//---------------------- Variables globales --------------------
// Liste des personnes
struct Personne personnes[MAX_PERSONNES];
int nombrePersonnes = 0;

// Liste des demandes de congé
struct Conge demandesConges[MAX_CONGES];
int nombreDemandesConges = 0;

// Liste des utilisateurs
// est-ce que liste des personnes et liste des utilisateurs ne sont pas un peu pareil ?
struct Utilisateur utilisateurs[MAX_UTILISATEURS];
int nombreUtilisateurs = 0;

//_________________________ déclaration des procédures et fonctions _______________________________
void saisie();
void creerFichepersonne();
char adressemail(char nom[], char prenom[]);
void crealogin();
void chargementfichier();
char supprespaces(char cdc[]);
char underscore8(char cdc []);
char fromunderscoretospace(char cdc []);
void conv_maj(char cdc[]);
void convmaj1cdc(char cdc[]);
Void calculsalaires();


//________________________________________________________________________________________________
---------------------------------MAIN MENU PRINCIPAL---------------------------------------------
//________________________________________________________________________________________________





//___________________________________________
// fonction pour saisir une fiche de personne
//___________________________________________
void saisie() 
{
struct personne nouvellePersonne
printf("Vous allez remplir une nouvelle fiche d'information. \n");
	
	// infos basiques
	printf ("Nom : ");
	scanf ("%[^\n]", nouvellePersonne.nom); //%[^/n] permet de lire les espaces d'une cdc, et n'arrête celle-ci qu'à "\n"
	printf ("Prénom : ");
	scanf ("%[^\n]", nouvellePersonne.prenom);
	printf ("Jour de naissance : ");
	scanf ("%d", &nouvellePersonne.date_naissance.jour);
	printf ("Mois de naissance (en chiffres arabes): ");
	scanf ("%d", &nouvellePersonne.date_naissance.mois);
	printf ("Année de naissance : ");
	scanf ("%d", &nouvellePersonne.date_naissance.annee);
	
	
	//coordonnées
	printf ("Coordonnées : \n");
	printf ("Adresse : ");
	printf ("Numéro de rue : ");
	scanf ("%[^\n]", nouvellePersonne.contact.numero);
	printf ("Nom de rue (précisez "rue", "boulevard" ou tout autre indicatif): ");
	scanf ("%[^\n]", nouvellePersonne.contact.rue);
	printf ("Complément d'adresse 1 : ");
	scanf ("%[^\n]", nouvellePersonne.contact.complement1); 
	printf ("Complément d'adresse 2 : ");
	scanf ("%[^\n]", nouvellePersonne.contact.complement2); 
	printf ("Code postal : ");
	scanf ("%d", &nouvellePersonne.contact.code_postal);
	printf ("Ville : ");
	scanf ("%[^\n]", nouvellePersonne.contact.ville); 
	printf ("Pays : ");
	scanf ("%[^\n]", nouvellePersonne.contact.pays); 
	printf ("Adresse mail personnelle : ");
	scanf ("%s", nouvellePersonne.contact.adresse_mail);
	printf ("Numéro de téléphone personnel : ");
	scanf ("%d", &nouvellePersonne.contact.telephone);
	printf ("Etat civil : ");
	scanf ("%[^\n]", nouvellePersonne.etatCivil);
	
	//embauche
	printf ("Jour d'embauche : ");
	scanf ("%d", &nouvellePersonne.date_embauche.jour);
	printf ("Mois d'embauche (en chiffres arabes) : ");
	scanf ("%d", &nouvellePersonne.date_embauche.mois);
	printf ("Année d'embauche : ");
	scanf ("%d", &nouvellePersonne.date_embauche.annee);
	printf ("Poste : ");
	scanf ("%[^\n]", nouvellePersonne.poste);
	printf ("Grade : ");
	scanf ("%[^\n]", nouvellePersonne.grade);
	printf ("Salaire (précisez la devise): ");
	scanf ("%[^\n]", &nouvellePersonne.salaire);
	printf ("Service ou département : "); 
	scanf ("%[^\n]", nouvellePersonne.ser_dep);

	//email et login
	strcpy(nouvellePersonne.emailpro, adressemail(nouvellePersonne.nom, nouvellePersonne.prenom))


	//on ajoute ce remplissage au tableau personnes
	personnes[nombreUtilisateurs++]=nouvellePersonne

}

//___________________________________________
// Fonction pour créer/sauvegarder une fiche de personne
//___________________________________________
void creerFichePersonne(char *nom, char *prenom, char *numrue, char *nomrue, char *comp1, char *comp2, char *ville, int *codepostal, char *pays, char *emailperso, int *telephone,
                         char *etatCivil, int *jnaiss, int *mnaiss, int *anaiss,  char *poste, char *grade, float salaire, int age, char *serdep, int *jemb, int *memb, int *aemb) {
FILE *fp


    if (nombrePersonnes < MAX_PERSONNES) {
        struct Personne nouvellePersonne; // à quoi sert cette ligne ?
        nouvellePersonne.numeroIdentification = nombrePersonnes + 1; // Attribution d'un numéro d'identification simple

//données personnelles
        strcpy(nouvellePersonne.nom, nom);
        strcpy(nouvellePersonne.prenom, prenom);
	nouvellePersonne.date_naissance.jour = jnaiss;
	nouvellePersonne.date_naissance.mois = mnaiss;
	nouvellePersonne.date_naissance.annee = anaiss;


//coordonnées
       	 strcpy(nouvellePersonne.contact.numero, numrue);
	 strcpy(nouvellePersonne.contact.rue, nomrue);
	 strcpy(nouvellePersonne.contact.complement1, comp1);
	 strcpy(nouvellePersonne.contact.complement2, comp2);
	 nouvellePersonne.contact.code_postal = codepostal
	 strcpy(nouvellePersonne.contact.ville, ville);
	 strcpy(nouvellePersonne.contact.pays, pays);
	 strcpy(nouvellePersonne.contact.adresse_mail, emailperso);
       	 strcpy(nouvellePersonne.contact.telephone, telephone);

//relatif au travail
        strcpy(nouvellePersonne.etatCivil, etatCivil);
        strcpy(nouvellePersonne.poste, poste);
        strcpy(nouvellePersonne.grade, grade);
        nouvellePersonne.salaire = salaire;
        nouvellePersonne.age = age;
	strcpy(nouvellePersonne.ser_dep, serdep);
     	nouvellePersonne.date_embauche.jour = jemb;
	nouvellePersonne.date_embauche.mois = memb;
	nouvellePersonne.date_embauche.annee = aemb;
	

//----------- ce que je te propose en remplacement pour cette fonction. La fonction underscore 8 remplace les espaces par des _, ce qui garantit leur intégrité dans le fichier txt

	fp = fopen(Fichierfiches.txt, "w")

	for (i=0; i<nombrePersonne; i++)

{
	personnes[nombrePersonnes++] = nouvellePersonne; 

// infos basiques
	underscore8(nouvellePersonne.nom);
	fprintf (fp, "%s", nouvellePersonne.nom); 
	underscore8(nouvellePersonne.prenom);
	fprintf (fp, "%s", nouvellePersonne.prenom);
	fprintf (fp, "%d", &nouvellePersonne.date_naissance.jour);
	fprintf (fp, "%d", &nouvellePersonne.date_naissance.mois);
	fprintf (fp, "%d", &nouvellePersonne.date_naissance.annee);
	
	
	//coordonnées
	underscore8(nouvellePersonne.contact.numero);
	fprintf (fp, "%s", nouvellePersonne.contact.numero);
	underscore8(nouvellePersonne.contact.rue);
	fprintf (fp, "%s", nouvellePersonne.contact.rue);
	underscore8(nouvellePersonne.contact.complement1);
	fprintf (fp, "%s", nouvellePersonne.contact.complement1); 
	underscore8(nouvellePersonne.contact.complement2);
	fprintf (fp, "%s", nouvellePersonne.contact.complement2); 
	fprintf (fp, "%d", &nouvellePersonne.contact.code_postal);
	underscore8(nouvellePersonne.contact.ville);
	fprintf (fp, "%s", nouvellePersonne.contact.ville); 
	underscore8(nouvellePersonne.contact.pays);
	fprintf (fp, "%s", nouvellePersonne.contact.pays); 
	fprintf (fp, "%s", nouvellePersonne.contact.adresse_mail);
	fprintf (fp, "%d", &nouvellePersonne.contact.telephone);
	underscore8(nouvellePersonne.etatCivil);
	fprintf (fp, "%s", nouvellePersonne.etatCivil);
	
	//embauche
	fprintf (fp, "%d", &nouvellePersonne.date_embauche.jour);
	fprintf (fp, "%d", &nouvellePersonne.date_embauche.mois);
	fprintf (fp, "%d", &nouvellePersonne.date_embauche.annee);
	underscore8(nouvellePersonne.poste);
	fprintf (fp, "%s", nouvellePersonne.poste);
	underscore8(nouvellePersonne.grade);
	fprintf (fp, "%s", nouvellePersonne.grade);
	underscore8(nouvellePersonne.salaire);
	fprintf (fp, "%s", &nouvellePersonne.salaire);
	underscore8(nouvellePersonne.ser-dep);
	fprintf (fp, "%s", nouvellePersonne.ser_dep);

	fclose(Fichierfiches.txt);

        printf("Fiche de %s %s enregistrée avec succès.\n", prenom, nom);
}

    } else {
        printf("Limite de personnes atteinte. Impossible de créer une nouvelle fiche.\n");
    }
}

//___________________________________________
// Fonction pour afficher une fiche
//___________________________________________

void afficherfiche()
{
int i, num, choix, numtab;
char nom[TAILLE_NOM];
struct personne employe;

printf ("Souhaitez vous rechercher une personne par son numéro d'identification (tapez 1) ou par son nom de famille (tapez 2) ?");
scanf ("%d", &choix);
	switch choix;
	{
		case 1:
		{
			printf "Entrez le numéro : ";
			scanf ("%d", num);
			numtab = recherche(num);
			break;
		}
		case 2:
		{
			printf "Entrez le nom de famille : ";
			scanf ("%[^\n]", nom);
			numtab = recherche(nom);
			break;
		}

	personne[numtab]=employe

	printf ("Fiche de renseignement de %s %s", employe.nom, employe.prenom);

	fromunderscoretospace(employe.nom);
	printf ("Nom : %[^\n]\n", employe.nom);
	printf ("Prénom : %s\n", employe.prenom);
	printf ("Ne(e) le %d / %d / %d \n", employe.date_naissance.jour, employe.date_naissance.mois, employe.date_naissance.annee);
	
	//coordonnées
	printf ("Coordonnées : \n");
	printf ("Adresse : ");
	fromunderscoretospace(employe.contact.numero);
	fromunderscoretospace(employe.contact.rue);
	printf ("%s %s\n", employe.contact.numero, employe.contact.rue);

if (nouvellePersonne.contact.complement1 != NULL)
	{
	fromunderscoretospace(employe.contact.complement1);
	printf ("%s\n", employe.contact.complement1); 
	}
if (nouvellePersonne.contact.complement2 != NULL)
	{
	fromunderscoretospace(employe.contact.complement2);
	printf ("%s\n", employe.contact.complement2); 
	}
	fromunderscoretospace(employe.contact.ville);
	printf ("%d %s\n", employe.contact.code_postal, employe.contact.ville); 
	fromunderscoretospace(employe.contact.pays);
	printf ("%s\n ", employe.contact.pays); 
	printf ("Adresse mail personnelle : %s\n ", employe.contact.adresse_mail);
	printf ("Numéro de téléphone personnel : ");
	scanf ("%d", employe.contact.telephone);
	printf ("Etat civil : ");
	fromunderscoretospace(employe.etatCivil);
	scanf ("%s", employe.etatCivil);
	
	//embauche
	prints ("Numéro employé : %d\n", employe.numeroIdentification);
	printf ("Date d'entree au sein de l'entreprise : %d / %d / %d \n", employe.date_embauche.jour, employe.date_embauche.mois, employe.date_embauche.annee);
	fromunderscoretospace(employe.poste);
	printf ("Poste : %s\n", employe.poste);
	fromunderscoretospace(employe.grade);
	printf ("Grade : %s\n", employe.grade);
	fromunderscoretospace(employe.salaire);
	printf ("Salaire : %s\n", employe.salaire);
	fromunderscoretospace(employe.ser_dep);
	printf ("Service ou département : %s\n", employe.ser_dep);
	printf ("Adresse mail professionnelle : %s\n", employe.emailpro);
}

//___________________________________________
// Procédure pour charger le fichier personnels
//___________________________________________
void chargementfichier()
{
struct personne employe;
int i;
FILE *fp;

i=0;

fp = fopen(Fichierfiches.txt, "r");

while (fscanf(fp, "%d %s %s", &employe.numeroIdentification, employe.nom, employe.emailpro)!= EOF)
	{
	personnes[i++]=employe;
	}
fclose(f1);
}


//___________________________________________
// Fonction pour créer une adresse mail pro 
//___________________________________________
char adressemail(nom[], prenom[])
{
char nom[TAILLE_NOM], prenom[TAILLE_NOM], email[TAILLE_NOM]

	supprespaces(nom);
	supprespaces(prenom);
	strcpy(email,prenom);
	strcat(email,".");
	strcat(email,nom);
	strcat(email,"@entreprise.com");

	return email;
}

//___________________________________________
// Procédure pour créer un login 
//___________________________________________

void crealogin()
{
char partnom[5], pseudo[7]

	supprespaces(nouvellePersonne.nom)
	strncpy(partnom, nouvellePersonne.nom, 6); // on garde 6 lettres du nom de famille
	printf("%s\n", partnom);
	
	strncpy(pseudo, nouvellePersonne.prenom, 1); //la première lettre du prénom en début d'username
	printf("%s\n", pseudo);

	strcat(pseudo,partnom); //on concatène l'initiale du prénom avec les 6 premières lettres du nom 

	printf("%s\n", pseudo);

	strcpy(nouvellePersonne.login_emp.username, pseudo); // on enregistre le pseudo donné dans la struct associée
	
	// pour ajouter un chiffre à la fin d'un doublon 
	
	fp=fopen(nomfichier, "r");
	
	recherche(nouvellePersonne.login_emp.username);
	
	if (numero != NON_TROUVE)
	{
		strcat(nouvellePersonne.login_emp.username, i);
		i++ //utilisation de i tout username doublon confondu pour éviter les triplons 
	}
}


//___________________________________________
// Fonction pour retirer les espaces d'une chaîne de caractères
//___________________________________________

char supprespaces(char cdc[])
{
	char cdc2[50];	
	int i, j, taille_cdc;

	taille_cdc = strlen(cdc);

	j=0;

	for (i=0; i<taille_cdc; i++)
	{
		if (cdc[i]!=' ')
			{
				cdc2[j]=cdc[i];
				j++;	
		
			}	
	}
	return cdc2;
}

//___________________________________________
// Fonction pour remplacer les espaces d'une cdc par des "_"
//___________________________________________

char underscore8(char cdc [])
{
	int i, taillecdc;
	
	i=0;
	
	taillecdc = strlen(cdc);
	for (i=0; i<taillecdc; i++)
	{
		if (cdc[i]==' ')
		{
			cdc[i]='_';
		}
	}
	
	return cdc;
}

//___________________________________________
//Fonction pour remplacer les "_" par des espaces
//___________________________________________

char fromunderscoretospace(char cdc [])
{
	int i, taillecdc;
	
	i=0;
	
	taillecdc = strlen(cdc);
	for (i=0; i<taillecdc; i++)
	{
		if (cdc[i]=='_')
		{
			cdc[i]=' ';
		}
	}
	
	return cdc;
}

//___________________________________________
//Procédure pour convertir en majuscule
//___________________________________________

void conv_maj(char cdc[]) 
{
	int taille, i;
	
	taille = strlen(cdc);
	
	for (i=0; i<taille; i++)
	{
		cdc[i]=toupper(cdc[i]);
	}
}

//___________________________________________
//Procédure pour  mettre une majuscule en début de mot sur une cdc
//___________________________________________

void convmaj1cdc(char cdc[]) 
{
	int taille, i;
	
	taille = strlen(cdc);
	cdc[0]=toupper(cdc[0]);
	
	for (i=1; i<taille; i++)
	{
		if (cdc[i-1]==' ')
		{
		cdc[i]=toupper(cdc[i]);
		}
		else
		{
		cdc[i]=tolower(cdc[i]);
		}

	}
}

//___________________________________________
//Procédure pour donner des calculs de salaire à titre indicatif
//___________________________________________
Void calculsalaires()
{
	float basehmensu=151.67, sbrut, snet, hmeffectives, coeffnet = 0.77, shbrut, shnet, spbrut, spnet, sabrut, sanet; //coeffnet=0,77 correspond au secteur privé, pour le secteur public passer à 0,85
	int choix;
	
	printf ("Que souhaitez-vous calculer ? Vous devez connaître un salaire brut mensuel à 35h au préalable. Ces calculs sont indicatifs et ne concernent que la France\n");
	printf ("1 - Salaire mensuel en net\n");
	printf ("2 - Taux horaire brut et net\n");
	printf ("3 - Salaire mensuel brut et net pour un mi-temps\n");
	printf ("4 - Salaire annuel brut et net\n");
	
	scanf("%d", &choix);
	
	printf ("Entrez le salaire mensuel brut en euros servant de base aux calculs : ");
	scanf ("%f", &sbrut);
	
	//ces calculs servent dans presque tous les cases
	snet=sbrut*coeffnet; //calcul du salaire mensuel net 
	shbrut=sbrut/basehmensu; //taux horaire brut
	shnet=snet/basehmensu; //taux horaire net
	
	switch (choix)
	{
		case 1 :
			{
			printf ("Un salaire brut de %f euros équivaut à un salaire net de %.2f euros\n", sbrut, snet);
			break;
			}
		case 2 :
			{
			printf ("Ces calculs correspondent à un temps de travail de 35h par semaine \n");
			printf ("Taux horaire brut : %.2f euros par heure\nTaux horaire net : %.2f euros par heure\n", shbrut, shnet);
			break;
			}
		case 3 : 
			{
			printf ("Saisissez le nombre d'heures effectuées par semaine : ");
			scanf("%f", &hmeffectives);
			spbrut=shbrut*hmeffectives*4;
			spnet=shnet*hmeffectives*4;
			printf ("Salaire mensuel brut pour un travail de %f heures : %.2f euros\n", hmeffectives, spbrut);
			printf ("Salaire mensuel net associé : %.2f euros\n", spnet);
			printf ("Nous rappelons que ces calculs sont indicatifs.\n");
			break;
			}
		case 4 : 
			{
			sabrut=sbrut*12;
			sanet=snet*12;
			printf ("Salaire brut annuel : %.2f euros\nSalaire net annuel : %.2f euros\n", sabrut, sanet);
			break;
			}
	}
	
	
}

void enregistrerhistorique(char pseudomodif[], element[])
{
	char jalontempo[100];
	struct tm *temps;
	time_t heureactu;
	FILE *fh;
	
	setlocale(LC_TIME, "fr_FR.UTF-8");//LC_ALL est un paramètre qui met (grace à la fonction setlocale) le paramètre time sur le crénau fr_FR.UTF-8 (c'est à dire français)
	
	time(&heureactu);
	temps= localtime(&heureactu);
	
	strftime (jalontempo, 100, "%d/%m/%y %H:%M:%S", temps);
	
	fh = fopen("Historiquedesactions.txt", "w");
	
	fprintf(Historiquedesactions.txt, "%s a modifie l'element suivant : %s a la date et horaire suivantes : %s ", pseudomodif, element, jalontempo );
	
	fclose(Historiquedesactions.txt);

	// pour permettre l'enregistrement d'une modification de fiche :
	// char elementmodif[100];
	//strcpy(elementmodif, "fiche");
	//strcpt(elementmodif, "_");
	//strcpt(elementmodif, personne.nom);
	//strcpt(elementmodif, "_");
	//strcpt(elementmodif, personne.prenom);
	//enregistrerhistorique(username, elementmodif);
}

